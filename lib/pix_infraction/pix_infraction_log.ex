defmodule StarkInfra.PixInfraction.Log do
  alias __MODULE__, as: Log
  alias StarkInfra.Utils.Rest
  alias StarkInfra.Utils.API
  alias StarkInfra.Utils.Check
  alias StarkInfra.PixInfraction
  alias StarkInfra.User.Project
  alias StarkInfra.User.Organization
  alias StarkInfra.Error

  @moduledoc """
  Groups PixInfraction.Log related functions
  """

  @doc """
  Every time a PixInfraction entity is modified, a corresponding PixInfraction.Log
  is generated for the entity. This log is never generated by the user.

  ## Attributes:
    - `:id` [string]: unique id returned when the log is created. ex: "5656565656565656"
    - `:created `[DateTime]: creation datetime for the log. ex: ~U[2020-3-10 10:30:0:0]
    - `:type` [string]: type of the PixInfraction event which triggered the log creation. ex: "created", "failed", "delivering", "delivered", "closed", "canceled"
    - `:errors` [list of strings]: list of errors linked to this PixInfraction event
    - `:infraction` [PixInfraction]: PixInfraction entity to which the log refers to.
  """
  @enforce_keys [
    :id,
    :created,
    :type,
    :errors,
    :infraction
  ]
  defstruct [
    :id,
    :created,
    :type,
    :errors,
    :infraction
  ]

  @type t() :: %__MODULE__{}

  @doc """
  Receive a single PixInfraction.Log struct previously created by the Stark Infra API by its id

  ## Parameters (required):
    - `:id` [string]: struct unique id. ex: "5656565656565656"

  ## Options:
    - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

  ## Return:
    - PixInfraction.Log struct with updated attributes
  """
  @spec get(
    id: binary,
    user: Project.t() | Organization.t() | nil
  ) ::
    {:ok, Log.t()} |
    {:error, [Error.t()]}
  def get(id, options \\ []) do
    Rest.get_id(resource(), id, options)
  end

  @doc """
  Same as get(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec get!(
    id: binary,
    user: Project.t() | Organization.t() | nil
  ) :: any
  def get!(id, options \\ []) do
    Rest.get_id!(resource(), id, options)
  end

  @doc """
  Receive a stream of PixInfraction.Log structs previously created in the Stark Infra API

  ## Options:
    - `:ids` [list of strings, default nil]: Log ids to filter PixInfraction Logs. ex: ["5656565656565656"]
    - `:limit` [integer, default nil]: maximum number of structs to be retrieved. Unlimited if nil. ex: 35
    - `:after` [Date or string, default nil]: date filter for structs created after specified date. ex: ~D[2020-03-10]
    - `:before` [Date or string, default nil]: date filter for structs created before a specified date. ex: ~D[2020-03-10]
    - `:types` [list of strings, default nil]: filter retrieved structs by types. ex: ["created", "failed", "delivering", "delivered", "closed", "canceled"]
    - `:infraction_ids` [list of strings, default nil]: list of PixInfraction IDs to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
    - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

  ## Return:
    - stream of PixInfraction.Log structs with updated attributes
  """
  @spec query(
    ids: [binary] | nil,
    limit: integer | nil,
    after: Date.t() | binary | nil,
    before: Date.t() | binary | nil,
    types: [binary] | nil,
    infraction_ids: [binary] | nil,
    user: Project.t() | Organization.t() | nil
  ) ::
    {:ok, [Log.t()]} |
    {:error, [Error.t()]}
  def query(options \\ []) do
    Rest.get_list(resource(), options)
  end

  @doc """
  Same as query(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec query!(
    ids: [binary] | nil,
    limit: integer | nil,
    after: Date.t() | binary | nil,
    before: Date.t() | binary | nil,
    types: [binary] | nil,
    infraction_ids: [binary] | nil,
    user: Project.t() | Organization.t() | nil
  ) :: any
  def query!(options \\ []) do
    Rest.get_list!(resource(), options)
  end

  @doc """
  Receive a list of up to 100 PixInfraction.Log structs previously created in the Stark Infra API and the cursor to the next page.
  Use this function instead of query if you want to manually page your infractions.

  ## Options:
    - `:cursor` [string, default nil]: cursor returned on the previous page function call
    - `:ids` [list of strings, default nil]: Log ids to filter PixInfraction Logs. ex: ["5656565656565656"]
    - `:limit` [integer, default 100]: maximum number of structs to be retrieved. Max = 100. ex: 35
    - `:after` [Date or string, default nil]: date filter for structs created after a specified date. ex: ~D[2020-03-10]
    - `:before` [Date or string, default nil]: date filter for structs created before a specified date. ex: ~D[2020-03-10]
    - `:types` [list of strings, default nil]: filter retrieved structs by types. ex: ["created", "failed", "delivering", "delivered", "closed", "canceled"]
    - `:infraction_ids` [list of strings, default nil]: list of PixInfraction ids to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
    - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.
  ## Return:
    - list of PixInfraction.Log structs with updated attributes
    - cursor to retrieve the next page of PixInfraction.Log objects
  """
  @spec page(
    cursor: binary | nil,
    ids: [binary] | nil,
    limit: integer | nil,
    after: Date.t() | binary | nil,
    before: Date.t() | binary | nil,
    types: [binary] | nil,
    infraction_ids: [binary] | nil,
    user: Project.t() | Organization.t() | nil
  ) ::
    {:ok, [Log.t()], binary} |
    {:error, [Error.t()]}
  def page(options \\ []) do
    Rest.get_page(resource(), options)
  end

  @doc """
  Same as page(), but it will unwrap the error tuple and raise in case of errors.
  """
  @spec page!(
    cursor: binary | nil,
    ids: [binary] | nil,
    limit: integer | nil,
    after: Date.t() | binary | nil,
    before: Date.t() | binary | nil,
    types: [binary] | nil,
    infraction_ids: [binary] | nil,
    user: Project.t() | Organization.t() | nil
  ) :: any
  def page!(options \\ []) do
    Rest.get_page!(resource(), options)
  end

  @doc false
  def resource() do
    {
      "PixInfractionLog",
      &resource_maker/1
    }
  end

  @doc false
  def resource_maker(json) do
    %Log{
      id: json[:id],
      created: json[:created] |> Check.datetime(),
      type: json[:type],
      errors: json[:errors],
      infraction: json[:infraction] |> API.from_api_json(&PixInfraction.resource_maker/1)
    }
  end
end
