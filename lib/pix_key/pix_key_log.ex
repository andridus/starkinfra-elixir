defmodule StarkInfra.PixKey.Log do
    alias __MODULE__, as: Log
    alias StarkInfra.Utils.Rest
    alias StarkInfra.Utils.API
    alias StarkInfra.Utils.Check
    alias StarkInfra.PixKey
    alias StarkInfra.User.Project
    alias StarkInfra.User.Organization
    alias StarkInfra.Error

    @moduledoc """
    Groups PixKey.Log related functions
    """

    @doc """
    Every time a PixKey entity is modified, a corresponding PixKey.Log
    is generated for the entity. This log is never generated by the user.

    ## Attributes:
        - `:id` [string]: unique id returned when the log is created. ex: "5656565656565656"
        - `:created` [DateTime]: creation datetime for the log. ex: ~U[2020-3-10 10:30:0:0]
        - `:type` [string]: type of the PixKey event which triggered the log creation. ex: "created", "registered", "updated", "failed", "canceling" and "canceled".
        - `:errors` [list of strings]: list of errors linked to this PixKey event
        - `:key` [PixKey]: PixKey entity to which the log refers to.
    """
    @enforce_keys [
        :id,
        :created,
        :type,
        :errors,
        :key
    ]
    defstruct [
        :id,
        :created,
        :type,
        :errors,
        :key
    ]

    @type t() :: %__MODULE__{}

    @doc """
    Receive a single PixKey.Log struct previously created by the Stark Infra API by its id

    ## Parameters (required):
        - `:id` [string]: struct unique id. ex: "5656565656565656"

    ## Options:
        - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

    ## Return:
        - PixKey.Log struct with updated attributes
    """
    @spec get(
        id: binary,
        user: Project.t() | Organization.t() | nil
    ) ::
        {:ok, Log.t()} |
        {:error, [Error.t()]}
    def get(id, options \\ []) do
        Rest.get_id(resource(), id, options)
    end

    @doc """
    Same as get(), but it will unwrap the error tuple and raise in case of errors.
    """
    @spec get!(
        id: binary,
        user: Project.t() | Organization.t() | nil
    ) :: Log.t()
    def get!(id, options \\ []) do
        Rest.get_id!(resource(), id, options)
    end

    @doc """
    Receive a stream of PixKey.Log structs previously created in the Stark Infra API

    ## Options:
        - `:ids` [list of strings, default nil]: Log ids to filter PixKey Logs. ex: ["5656565656565656"]
        - `:limit` [integer, default 100]: maximum number of structs to be retrieved. Max = 100. ex: 35
        - `:after` [Date or string, default nil]: date filter for structs created after specified date. ex: ~D[2020, 3, 10]
        - `:before` [Date or string, default nil]: date filter for structs created before a specified date. ex: ~D[2020, 3, 10]
        - `:types` [list of strings, default nil]: filter retrieved structs by types. ex: ["created"] or ["failed"]
        - `:key_ids` [list of strings, default nil]: list of PixKey IDs to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

    ## Return:
        - stream of PixKey.Log structs with updated attributes
    """
    @spec query(
        ids: [binary] | nil,
        limit: integer | nil,
        after: Date.t() | binary | nil,
        before: Date.t() | binary | nil,
        types: [binary] | nil,
        key_ids: [binary] | nil,
        user: Project.t() | Organization.t() | nil
    ) ::
        {:ok, {binary, [Log.t()]}} |
        {:error, [Error.t()]}
    def query(options \\ []) do
        Rest.get_list(resource(), options)
    end

    @doc """
    Same as query(), but it will unwrap the error tuple and raise in case of errors.
    """
    @spec query!(
        ids: [binary] | nil,
        limit: integer | nil,
        after: Date.t() | binary | nil,
        before: Date.t() | binary | nil,
        types: [binary] | nil,
        key_ids: [binary] | nil,
        user: Project.t() | Organization.t() | nil
    ) :: {binary, [Log.t()]}
    def query!(options \\ []) do
        Rest.get_list!(resource(), options)
    end

    @doc """
    Receive a list of up to 100 PixKey.Log structs previously created in the Stark Infra API and the cursor to the next page.
    Use this function instead of query if you want to manually page your keys.

    ## Options:
        - `:cursor` [binary, default nil]: cursor returned on the previous page function call
        - `:ids` [list of strings, default nil]: Log ids to filter PixKey Logs. ex: ["5656565656565656"]
        - `:limit` [integer, default 100]: maximum number of structs to be retrieved. Max = 100. ex: 35
        - `:after` [Date or string, default nil]: date filter for structs created after a specified date. ex: ~D[2020, 3, 10]
        - `:before` [Date or string, default nil]: date filter for structs created before a specified date. ex: ~D[2020, 3, 10]
        - `:types` [list of strings, default nil]: filter retrieved structs by types. ex: ["created"] or ["failed"]
        - `:key_ids` [list of strings, default nil]: list of PixKey IDs to filter retrieved objects. ex: ["5656565656565656", "4545454545454545"]
        - `:user` [Organization/Project, default nil]: Organization or Project struct returned from StarkInfra.project(). Only necessary if default project or organization has not been set in configs.

    ## Return:
        - list of PixKey.Log structs with updated attributes
        - cursor to retrieve the next page of PixKey.Log objects
    """
    @spec page(
        cursor: binary | nil,
        ids: [binary] | nil,
        limit: integer | nil,
        after: Date.t() | binary | nil,
        before: Date.t() | binary | nil,
        types: [binary] | nil,
        key_ids: [binary] | nil,
        user: Project.t() | Organization.t() | nil
    ) ::
        {:ok, {binary, [Log.t()]}} |
        {:error, [Error.t()]}
    def page(options \\ []) do
        Rest.get_page(resource(), options)
    end

    @doc """
    Same as page(), but it will unwrap the error tuple and raise in case of errors.
    """
    @spec page!(
        cursor: binary | nil,
        ids: [binary] | nil,
        limit: integer | nil,
        after: Date.t() | binary | nil,
        before: Date.t() | binary | nil,
        types: [binary] | nil,
        key_ids: [binary] | nil,
        user: Project.t() | Organization.t() | nil
    ) :: {binary, [Log.t()]}
    def page!(options \\ []) do
        Rest.get_page!(resource(), options)
    end

    @doc false
    def resource() do
        {
            "PixKeyLog",
            &resource_maker/1
        }
    end

    def resource_maker(json) do
        %Log{
            id: json[:id],
            type: json[:type],
            created:  json[:created] |> Check.datetime(),
            key: json[:key] |> API.from_api_json(&PixKey.resource_maker/1),
            errors: json[:errors],
        }
    end
end
